
//queryconst_enummethods.go is auto generated by utility enummethods. DO NOT EDIT
//This file have some type methods implementing the Enumerator and json.Marshaler, json.Unmarshaler interfaces.
package v1const

import (
	
	"strings"
	"github.com/ivi81/enummethods/enumerator"
)


//MarshalJSON - реализует метод интерфейса json.Marshaler
func (m QueryConst) MarshalJSON() ([]byte, error) {
	return enumerator.MarshalJSON(m)
}

//UnmarshalJSON - реализует метод интерфейса json.UnMarshaler
func (m *QueryConst) UnmarshalJSON(data []byte) error {
	return enumerator.UnmarshalJSON(m, data)
}


//IsValid проверка корректности значения
//Реализует интерфейс Validator
func (m QueryConst) IsValid() bool {

	switch m {
	case
		listObservable,
		getLog,
		listTag,
		getProfile,
		listAnalyzerTemplate,
		listCustomField,
		getTask,
		getObservable,
		getAlert,
		getObservableType,
		waitingTask,
		getOrganisation,
		myTasks,
		listTask,
		listJob,
		getCase,
		listDashboard,
		getAudit,
		listCase,
		listAudit,
		listCaseTemplate,
		tagAutoComplete,
		getCaseTemplate,
		waitingTasks,
		listAction,
		getTag,
		getUser,
		listUser,
		listPage,
		listLog,
		getJob,
		listProfile,
		listObservableType,
		getReportTemplate,
		getDashboard,
		getAction,
		getPage,
		listOrganisation,
		getCustomField,
		listAlert,
		idOrName:
		return true
	}
	return false
}


//SetValue конвертация строки в значение типа
//Реализует интерфейс Unstringer
func (m *QueryConst) SetValue(s string) bool {
	i := strings.Index(_QueryConst_name, s)
	if i != -1 {

		for index, v := range _QueryConst_index {
			if i-int(v) == 0 {
				*m = QueryConst(index)
				return true
			}
		}
	}
	return false
}

